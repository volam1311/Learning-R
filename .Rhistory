?seq
library(foreign)
library(foreign)
require(foreign)
print("Hello world")
1+2
x <- 3
x < y
x > y
x != y
x == y
class(i) #datatype
is.integer(x)
x <- 2
x <- 3
y <- x + 10
z <-  x-1
i <- exp(x) #calculate the exponential of x or e^x
rm(x)
x <- 3
x < y
x > y
x != y
x == y
class(i) #datatype
is.integer(x)
as.integer(x)
as.integer(i)
c <- "lobster"
x <- c("lobster")
class(x)
#Vectors:
v1 <- c(1,2)
v1 <- (11,22,33)
v1 <- c(11,22,33)
v2 <- c("Monday","Tuesday","Friday")
v3 <- rep(22,2)
v4 <- 1:100
v5 <- seq(from=1, to=100,by=2)
v4 <- 1:100 #from 1 to 100
v4
v5 <- seq(from=1, to=100,by=2) #from 1 to 100, step = 2
hist(v9) #draw the histogram of v9
v9 <- rnorm(100,50,100)
hist(v9) #draw the histogram of v9
x != y
print("R script")
set.seed(0)
data <- rnorm(10^7)
print(head(data))
print("R script")
set.seed(0)
data <- rnorm(10^7)
print(head(data))
x <- 10
help(exp)
(3 + exp(2)) / cos(pi)
log(10)
log10(10)
log2(8)
2^3
cos(pi)
tan(pi)
vec1 <- c(10,20,30)
print(vec1[1])
print(vec1[4])
print(vec1)
vec2 <- (50,60)
vec2 <- c(50,60)
vec1 <- append(vec1,vec2)
print(vec1)
summary(v4)
print(var1 + var 2)
print(var1+var2)
var1 <-complex(real = 7, imaginary = 10)
var2 <-complex(real = 7, imaginary = 10)
print(var1+var2)
char <- 'abc'
chartwo <- "abc"
char == chartwo
nchar(char) #Return the number of character
#Slice the string
substr(temp,start=7,stop=10)
temp <- "hello world"
#Slice the string
substr(temp,start=7,stop=10)
temp2 <- "Today is Monday"
substr(temp2,start=1,stop=5)
#Vector only allows the same data type while list allows different datatypes
x <- list(1,2,3)
print(x)
list_container <- list(x=c(1,2,3),y="abc",z=(TRUE, FALSE))
list_container <- list(x=c(1,2,3),y="abc",z=(TRUE,FALSE))
list_container <- list(x=c(1,2,3),y="abc",z=c(TRUE,FALSE))
view(list_container)
print(list_container)
list_container[x]
list_container["x"]
print(list_container["x"])
vect <- numeric()
print(vect)
#The negative position of list in R is deleting the column so do not try to use it.
list2 <- list(a=c("abc","def"), b = c(4,3,2))
list3 <-append(list2,list_container)
print(list3)
df <- data.frame("car"=c("toyota","ford","nissan","suzuki"),speed=c(100,90,95,80),quality=c(5,4,3,2))
print(df)
rownames(df)
colnames(df)
is.data.frame(df)
is.list(df)
df1 <- data.frame()
df["price"] <- c(1000,1000,2000,3000)
print(df)
cbind(door=c(4,2,4,4),df)
subset(df, quality>2)
subset(df, quality>2) #get the subset for the dataframe with quality greater than 2
df
plot(df[["speed"]],df[["quality"]])
is_rain = TRUE
if(is_rain == TRUE){
print("It is raining")
}
is_rain = FALSE
if(is_rain == TRUE){
print("It is raining")
}else{
print("Don't carry an umbrella")
}
library(dplyr)
starwarsdata <- starwars
view(starwarsdata)
View(starwarsdata)
newdata <- select(starwarsdata,name,height,mass)
View(newdata)
newdata2 <- mutate(newdata,height=height*2, mass=mass*2)
View(newdata2)
newdata <- filter(newdata, height>172)
newdata <- mutate(newdata2,height=height*0.5,mass = mass*0.5)
newdata3 <- filter(newdata, height>172)
View(newdata3)
newdata4 <- summarize(newdata,meanheight=mean(height,na.rm=TRUE))
newdata4 <- summarize(newdata,meanheight=mean(height,na.rm=TRUE),meanmass=mean(mass,na.rm=TRUE))
View(newdata4)
newdata5 <- arrange(newdata,desc(height))
View(newdata5)
install.packages(ggplot2)
"ggplot2"
install.packages("ggplot2")
library(ggplot2)
library(dplyr)
insurance <- read.csv("insurance.csv")
setwd("~/Documents/R")
insurance <- read.csv("insurance.csv")
View(insurance)
insurance$obese <- if_else(insurance$bmi>30,"obese","notobese")
#If there is no obese column we will create a new one. Then we will put the data inside it by the conditions if bmi >30 then obese else notobese
ggplot(insurance,mapping = aes(insurance$age,insurance$expenses))
#If there is no obese column we will create a new one. Then we will put the data inside it by the conditions if bmi >30 then obese else notobese
ggplot(insurance,mapping = aes(insurance$age,insurance$expenses))+geom_point()
#If there is no obese column we will create a new one. Then we will put the data inside it by the conditions if bmi >30 then obese else notobese
ggplot(insurance,mapping = aes(age,expenses))+geom_point()
#If there is no obese column we will create a new one. Then we will put the data inside it by the conditions if bmi >30 then obese else notobese
ggplot(insurance,mapping = aes(age,charges))+geom_point()
#If there is no obese column we will create a new one. Then we will put the data inside it by the conditions if bmi >30 then obese else notobese
ggplot(insurance,mapping = aes(age,charges))+geom_point(color="blue",alpha=0.7,shape=2)
#If there is no obese column we will create a new one. Then we will put the data inside it by the conditions if bmi >30 then obese else notobese
ggplot(insurance,mapping = aes(age,charges))+geom_point(color="blue",alpha=0.7,size=2)
geom_smooth(method = "lm")
#If there is no obese column we will create a new one. Then we will put the data inside it by the conditions if bmi >30 then obese else notobese
ggplot(insurance,mapping = aes(age,charges))+geom_point(color="red",alpha=0.7,size=2) #geom gives us the option to draw it by point,...
geom_smooth(method = "lm")
#If there is no obese column we will create a new one. Then we will put the data inside it by the conditions if bmi >30 then obese else notobese
ggplot(insurance,mapping = aes(age,charges))+geom_point(color="red",alpha=0.7,size=2)+ #geom gives us the option to draw it by point,...
geom_smooth(method = "lm")
#If there is no obese column we will create a new one. Then we will put the data inside it by the conditions if bmi >30 then obese else notobese
ggplot(insurance,mapping = aes(age,charges))+geom_point(color="red",alpha=0.7,size=2)+ #geom gives us the option to draw it by point,...
geom_smooth(method = "glm") #Draw a smoothing line throughout the data
#If there is no obese column we will create a new one. Then we will put the data inside it by the conditions if bmi >30 then obese else notobese
ggplot(insurance,mapping = aes(age,charges,color=smoker))+geom_point(alpha=0.7,size=2)+ #geom gives us the option to draw it by point,...
geom_smooth(method = "glm") #Draw a smoothing line throughout the data
ggplot(insurance,mapping = aes(age,charges,color=smoker))+geom_point(alpha=0.7,size=2)+ geom_smooth(method = "glm") +
facet_wrap(obese)
ggplot(insurance,mapping = aes(age,charges,color=smoker))+geom_point(alpha=0.7,size=2)+ geom_smooth(method = "glm") +
facet_wrap(~obese)
ggplot(insurance,mapping = aes(age,charges,color=smoker))+geom_point(alpha=0.7,size=2)+ geom_smooth(method = "glm") +
facet_wrap(~obese)+labs(title="Insurance Plot",subtitle = "plot for the graph from age 20 to 60")
ggplot(insurance,mapping = aes(age,charges,color=smoker))+geom_point(alpha=0.7,size=2)+ geom_smooth(method = "glm") +
facet_wrap(~obese)+labs(title="Insurance Plot",subtitle = "plot for the graph from age 20 to 60",x="age")
ggplot(insurance,mapping = aes(age,charges,color=smoker))+geom_point(alpha=0.7,size=2)+ geom_smooth(method = "glm") +
facet_wrap(~obese)+labs(title="Insurance Plot",subtitle = "plot for the graph from age 20 to 60",x="age", y="expenses")
ggplot(insurance,mapping = aes(age,charges,color=smoker))+geom_point(alpha=0.7,size=2)+ geom_smooth(method = "glm") +
facet_wrap(~obese)+labs(title="Insurance Plot",subtitle = "plot for the graph from age 20 to 60",x="age", y="expenses",color="smoker")
#We add the titles and subtitles and labels for the x and y of the graph
+theme_bw()
ggplot(insurance,mapping = aes(age,charges,color=smoker))+geom_point(alpha=0.7,size=2)+ geom_smooth(method = "glm") +
facet_wrap(~obese)+labs(title="Insurance Plot",subtitle = "plot for the graph from age 20 to 60",x="age", y="expenses",color="smoker")+
#We add the titles and subtitles and labels for the x and y of the graph
theme_bw()
install.packages("mosaicData")
library(ggplot2)
data(Marriage,packages="mosaicData")
install.packages("mosaicData")
data(Marriage,package="mosaicData")
df <- Marriage
View(df)
ggplot(Marriage,aes(x=race)) + geom_bar()
ggplot(Marriage,aes(x=race)) + geom_bar(fill = "cornflowerblue", color="black") + labs(x="Race",y="Count",title ="Participants")
ggplot(Marriage,aes(x=race, y=after_stat(count/sum(data)))) + geom_bar(fill = "cornflowerblue", color="black") + labs(x="Race",y="Percent",title ="Participants")
ggplot(Marriage,aes(x=race, y=after_stat(count/sum(df)))) + geom_bar(fill = "cornflowerblue", color="black") + labs(x="Race",y="Percent",title ="Participants")
ggplot(Marriage,aes(x=race, y=after_stat(count/sum(Marriage)))) + geom_bar(fill = "cornflowerblue", color="black") + labs(x="Race",y="Percent",title ="Participants")
ggplot(Marriage,aes(x=race, y=after_stat(count/sum(count)))) + geom_bar(fill = "cornflowerblue", color="black") + labs(x="Race",y="Percent",title ="Participants")
+scales_y_continous(labels=scales::percent())
+scale_y_continuous(labels=scales::percent())
ggplot(Marriage,aes(x=race, y=after_stat(count/sum(count)))) + geom_bar(fill = "cornflowerblue", color="black") + labs(x="Race",y="Percent",title ="Participants")+scale_y_continuous(labels=scales::percent())
ggplot(Marriage,aes(x=race, y=after_stat(count/sum(count)))) + geom_bar(fill = "cornflowerblue", color="black") + labs(x="Race",y="Percent",title ="Participants")+scale_y_continuous(labels=scales::percent
ggplot(Marriage,aes(x=race, y=after_stat(count/sum(count)))) + geom_bar(fill = "cornflowerblue", color="black") + labs(x="Race",y="Percent",title ="Participants")+scale_y_continuous(labels=scales::percent
ggplot(Marriage,aes(x=race, y=after_stat(count/sum(count)))) + geom_bar(fill = "cornflowerblue", color="black") + labs(x="Race",y="Percent",title ="Participants")+scale_y_continuous(labels=scales::percent)
ggplot(Marriage,aes(x=officialTitle)) +
geom_bar()
ggplot(Marriage,aes(x=officialTitle)) +
geom_bar()+coord_flip()
ggplot(Marriage,aes(x=officialTitle)) +
geom_bar()+coord_flip()+
labs(x="Official Title",y ="Participants count")
ggplot(Marriage,aes(x=officialTitle)) +
geom_bar()+coord_flip()+
labs(x="Official Title",y ="Participants count",title="Count participants by title")
ggplot(Marriage,aes(x=officialTitle)) +
geom_bar()+coord_flip()+
labs(x="Official Title",y ="Participants count",title="Count participants by title")+
theme(axis.x.text=element_text(angle=45, hjust=1))
ggplot(Marriage,aes(x=officialTitle)) +
geom_bar()+coord_flip()+
labs(x="Official Title",y ="Participants count",title="Count participants by title")+
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplot(Marriage,aes(x=officialTitle)) +
geom_bar()+
labs(x="Official Title",y ="Participants count",title="Count participants by title")+
theme(axis.text.x=element_text(angle=45, hjust=1))
labs(x="Official Title",y ="Participants count",title="Count participants by title")+
theme(axis.text.x=element_text(angle=45, hjust=1))
labs(x="Official Title",y ="Participants count",title="Count participants by title")
ggplot(Marriage,aes(x=officialTitle)) +
geom_bar()+coord_flip() #flip the vertical and horizontal so that the plot looks better
ggplot(Marriage,aes(x=officialTitle)) +
geom_bar()+
labs(x="Official Title",y ="Participants count",title="Count participants by title")+
theme(axis.text.x=element_text(angle=45,hjust=1))
# Use the pyplot library
library(ggpie)
data(Marriage,package="mosaicData")
ggpie(Marriage,count_type= "full",fill_color=None)
ggpie(Marriage,count_type= "full",fill_color=NULL)
ggpie(Marriage,count_type= "full",fill_color=NULL,group_key = "race")
ggpie(Marriage,count_type="full",fill_color=NULL,group_key="race")
# Use the pyplot library
install.packages("ggpie")
library(ggpie)
data(Marriage,package="mosaicData")
ggpie(Marriage,count_type="full",fill_color=NULL,group_key="race")
library(ggplot2)
library(treemapify)
install.packages(treemapify)
install.packages("treemapify")
library(treemapify)
data(Marriage,package = "mosaicData")
Marriage_count <- as.data.frame(table(Marriage$officialTitle))
names(Marriage_count) <- c("officialTitle","count")
View(Marriage_count)
ggplot(Marriage,aes=(fill= "officialTitle",area="count",label="officialTitle"))
ggplot(Marriage_count,aes=(fill= "officialTitle",area="count",label="officialTitle"))+
ggplot(Marriage_count, aes(area = count, fill = officialTitle, label = officialTitle)) +
geom_treemap()
ggplot(Marriage_count, aes(area = count, fill = officialTitle, label = officialTitle)) +
geom_treemap()+
geom_treemap_text(grow= TRUE,reflow = TRUE)
#Draw waffle charts
library(waffle)
ggplot(Marriage_count,aes(fill= officialTitle,values = count))+
geom_waffle(na.rm = TRUE)
#bins are the ranges into which the data is grouped. The size of the bins is called bandwidth
data(Marriage,package="mosaicData")
ggplot(Marriage,aes(x=age))+
geom_histogram()+
labs(x="Age",title="Participants by age")
ggplot(Marriage,aes(x=age))+
geom_histogram(fill="cornflowerblue",color="black")+
labs(x="Age",title="Participants by age")
ggplot(Marriage,aes(x=age))+
geom_histogram(fill="cornflowerblue",color="black",bins=5)+
labs(x="Age",title="Participants by age")
ggplot(Marriage,aes(x=age))+
geom_histogram(fill="cornflowerblue",color="black",bins=30)+
labs(x="Age",title="Participants by age")
library(ggplot2)
ggplot(Marriage,aes(x=age))+
geom_density()+
labs(title="Participants by Age")
ggplot(Marriage,aes(x=age))+
geom_density(fill="cornflowerblue")+
labs(title="Participants by Age")
ggplot(Marriage,aes(x=age))+
geom_density(fill="cornflowerblue",bw=1)+
labs(title="Participants by Age")
ggplot(Marriage,aes(x=age))+
geom_density(fill="cornflowerblue",bw=10)+
labs(title="Participants by Age")
